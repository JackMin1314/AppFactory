// Code generated by entc, DO NOT EDIT.

package ent

import (
	"AppFactory/internal/data/ent/predicate"
	"AppFactory/internal/data/ent/student"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StudentUpdate is the builder for updating Student entities.
type StudentUpdate struct {
	config
	hooks    []Hook
	mutation *StudentMutation
}

// Where adds a new predicate for the StudentUpdate builder.
func (su *StudentUpdate) Where(ps ...predicate.Student) *StudentUpdate {
	su.mutation.predicates = append(su.mutation.predicates, ps...)
	return su
}

// SetExamNum sets the "exam_num" field.
func (su *StudentUpdate) SetExamNum(s string) *StudentUpdate {
	su.mutation.SetExamNum(s)
	return su
}

// SetStudentName sets the "student_name" field.
func (su *StudentUpdate) SetStudentName(s string) *StudentUpdate {
	su.mutation.SetStudentName(s)
	return su
}

// SetClassName sets the "class_name" field.
func (su *StudentUpdate) SetClassName(s string) *StudentUpdate {
	su.mutation.SetClassName(s)
	return su
}

// SetChineseScore sets the "chinese_score" field.
func (su *StudentUpdate) SetChineseScore(s string) *StudentUpdate {
	su.mutation.SetChineseScore(s)
	return su
}

// SetNillableChineseScore sets the "chinese_score" field if the given value is not nil.
func (su *StudentUpdate) SetNillableChineseScore(s *string) *StudentUpdate {
	if s != nil {
		su.SetChineseScore(*s)
	}
	return su
}

// SetMathScore sets the "math_score" field.
func (su *StudentUpdate) SetMathScore(s string) *StudentUpdate {
	su.mutation.SetMathScore(s)
	return su
}

// SetNillableMathScore sets the "math_score" field if the given value is not nil.
func (su *StudentUpdate) SetNillableMathScore(s *string) *StudentUpdate {
	if s != nil {
		su.SetMathScore(*s)
	}
	return su
}

// SetEnglishScore sets the "english_score" field.
func (su *StudentUpdate) SetEnglishScore(s string) *StudentUpdate {
	su.mutation.SetEnglishScore(s)
	return su
}

// SetNillableEnglishScore sets the "english_score" field if the given value is not nil.
func (su *StudentUpdate) SetNillableEnglishScore(s *string) *StudentUpdate {
	if s != nil {
		su.SetEnglishScore(*s)
	}
	return su
}

// SetTotalScore sets the "total_score" field.
func (su *StudentUpdate) SetTotalScore(s string) *StudentUpdate {
	su.mutation.SetTotalScore(s)
	return su
}

// SetNillableTotalScore sets the "total_score" field if the given value is not nil.
func (su *StudentUpdate) SetNillableTotalScore(s *string) *StudentUpdate {
	if s != nil {
		su.SetTotalScore(*s)
	}
	return su
}

// SetClassRate sets the "class_rate" field.
func (su *StudentUpdate) SetClassRate(s string) *StudentUpdate {
	su.mutation.SetClassRate(s)
	return su
}

// SetNillableClassRate sets the "class_rate" field if the given value is not nil.
func (su *StudentUpdate) SetNillableClassRate(s *string) *StudentUpdate {
	if s != nil {
		su.SetClassRate(*s)
	}
	return su
}

// SetSchoolRate sets the "school_rate" field.
func (su *StudentUpdate) SetSchoolRate(s string) *StudentUpdate {
	su.mutation.SetSchoolRate(s)
	return su
}

// SetNillableSchoolRate sets the "school_rate" field if the given value is not nil.
func (su *StudentUpdate) SetNillableSchoolRate(s *string) *StudentUpdate {
	if s != nil {
		su.SetSchoolRate(*s)
	}
	return su
}

// SetStepRank sets the "step_rank" field.
func (su *StudentUpdate) SetStepRank(s string) *StudentUpdate {
	su.mutation.SetStepRank(s)
	return su
}

// SetNillableStepRank sets the "step_rank" field if the given value is not nil.
func (su *StudentUpdate) SetNillableStepRank(s *string) *StudentUpdate {
	if s != nil {
		su.SetStepRank(*s)
	}
	return su
}

// SetUploadDate sets the "upload_date" field.
func (su *StudentUpdate) SetUploadDate(s string) *StudentUpdate {
	su.mutation.SetUploadDate(s)
	return su
}

// SetIsDeleted sets the "is_deleted" field.
func (su *StudentUpdate) SetIsDeleted(s string) *StudentUpdate {
	su.mutation.SetIsDeleted(s)
	return su
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (su *StudentUpdate) SetNillableIsDeleted(s *string) *StudentUpdate {
	if s != nil {
		su.SetIsDeleted(*s)
	}
	return su
}

// SetDeleteTime sets the "delete_time" field.
func (su *StudentUpdate) SetDeleteTime(s string) *StudentUpdate {
	su.mutation.SetDeleteTime(s)
	return su
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (su *StudentUpdate) SetNillableDeleteTime(s *string) *StudentUpdate {
	if s != nil {
		su.SetDeleteTime(*s)
	}
	return su
}

// Mutation returns the StudentMutation object of the builder.
func (su *StudentUpdate) Mutation() *StudentMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StudentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StudentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StudentUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StudentUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StudentUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StudentUpdate) check() error {
	if v, ok := su.mutation.ExamNum(); ok {
		if err := student.ExamNumValidator(v); err != nil {
			return &ValidationError{Name: "exam_num", err: fmt.Errorf("ent: validator failed for field \"exam_num\": %w", err)}
		}
	}
	return nil
}

func (su *StudentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   student.Table,
			Columns: student.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: student.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.ExamNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldExamNum,
		})
	}
	if value, ok := su.mutation.StudentName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldStudentName,
		})
	}
	if value, ok := su.mutation.ClassName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldClassName,
		})
	}
	if value, ok := su.mutation.ChineseScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldChineseScore,
		})
	}
	if value, ok := su.mutation.MathScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldMathScore,
		})
	}
	if value, ok := su.mutation.EnglishScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldEnglishScore,
		})
	}
	if value, ok := su.mutation.TotalScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldTotalScore,
		})
	}
	if value, ok := su.mutation.ClassRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldClassRate,
		})
	}
	if value, ok := su.mutation.SchoolRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldSchoolRate,
		})
	}
	if value, ok := su.mutation.StepRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldStepRank,
		})
	}
	if value, ok := su.mutation.UploadDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldUploadDate,
		})
	}
	if value, ok := su.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldIsDeleted,
		})
	}
	if value, ok := su.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldDeleteTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{student.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// StudentUpdateOne is the builder for updating a single Student entity.
type StudentUpdateOne struct {
	config
	hooks    []Hook
	mutation *StudentMutation
}

// SetExamNum sets the "exam_num" field.
func (suo *StudentUpdateOne) SetExamNum(s string) *StudentUpdateOne {
	suo.mutation.SetExamNum(s)
	return suo
}

// SetStudentName sets the "student_name" field.
func (suo *StudentUpdateOne) SetStudentName(s string) *StudentUpdateOne {
	suo.mutation.SetStudentName(s)
	return suo
}

// SetClassName sets the "class_name" field.
func (suo *StudentUpdateOne) SetClassName(s string) *StudentUpdateOne {
	suo.mutation.SetClassName(s)
	return suo
}

// SetChineseScore sets the "chinese_score" field.
func (suo *StudentUpdateOne) SetChineseScore(s string) *StudentUpdateOne {
	suo.mutation.SetChineseScore(s)
	return suo
}

// SetNillableChineseScore sets the "chinese_score" field if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableChineseScore(s *string) *StudentUpdateOne {
	if s != nil {
		suo.SetChineseScore(*s)
	}
	return suo
}

// SetMathScore sets the "math_score" field.
func (suo *StudentUpdateOne) SetMathScore(s string) *StudentUpdateOne {
	suo.mutation.SetMathScore(s)
	return suo
}

// SetNillableMathScore sets the "math_score" field if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableMathScore(s *string) *StudentUpdateOne {
	if s != nil {
		suo.SetMathScore(*s)
	}
	return suo
}

// SetEnglishScore sets the "english_score" field.
func (suo *StudentUpdateOne) SetEnglishScore(s string) *StudentUpdateOne {
	suo.mutation.SetEnglishScore(s)
	return suo
}

// SetNillableEnglishScore sets the "english_score" field if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableEnglishScore(s *string) *StudentUpdateOne {
	if s != nil {
		suo.SetEnglishScore(*s)
	}
	return suo
}

// SetTotalScore sets the "total_score" field.
func (suo *StudentUpdateOne) SetTotalScore(s string) *StudentUpdateOne {
	suo.mutation.SetTotalScore(s)
	return suo
}

// SetNillableTotalScore sets the "total_score" field if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableTotalScore(s *string) *StudentUpdateOne {
	if s != nil {
		suo.SetTotalScore(*s)
	}
	return suo
}

// SetClassRate sets the "class_rate" field.
func (suo *StudentUpdateOne) SetClassRate(s string) *StudentUpdateOne {
	suo.mutation.SetClassRate(s)
	return suo
}

// SetNillableClassRate sets the "class_rate" field if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableClassRate(s *string) *StudentUpdateOne {
	if s != nil {
		suo.SetClassRate(*s)
	}
	return suo
}

// SetSchoolRate sets the "school_rate" field.
func (suo *StudentUpdateOne) SetSchoolRate(s string) *StudentUpdateOne {
	suo.mutation.SetSchoolRate(s)
	return suo
}

// SetNillableSchoolRate sets the "school_rate" field if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableSchoolRate(s *string) *StudentUpdateOne {
	if s != nil {
		suo.SetSchoolRate(*s)
	}
	return suo
}

// SetStepRank sets the "step_rank" field.
func (suo *StudentUpdateOne) SetStepRank(s string) *StudentUpdateOne {
	suo.mutation.SetStepRank(s)
	return suo
}

// SetNillableStepRank sets the "step_rank" field if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableStepRank(s *string) *StudentUpdateOne {
	if s != nil {
		suo.SetStepRank(*s)
	}
	return suo
}

// SetUploadDate sets the "upload_date" field.
func (suo *StudentUpdateOne) SetUploadDate(s string) *StudentUpdateOne {
	suo.mutation.SetUploadDate(s)
	return suo
}

// SetIsDeleted sets the "is_deleted" field.
func (suo *StudentUpdateOne) SetIsDeleted(s string) *StudentUpdateOne {
	suo.mutation.SetIsDeleted(s)
	return suo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableIsDeleted(s *string) *StudentUpdateOne {
	if s != nil {
		suo.SetIsDeleted(*s)
	}
	return suo
}

// SetDeleteTime sets the "delete_time" field.
func (suo *StudentUpdateOne) SetDeleteTime(s string) *StudentUpdateOne {
	suo.mutation.SetDeleteTime(s)
	return suo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableDeleteTime(s *string) *StudentUpdateOne {
	if s != nil {
		suo.SetDeleteTime(*s)
	}
	return suo
}

// Mutation returns the StudentMutation object of the builder.
func (suo *StudentUpdateOne) Mutation() *StudentMutation {
	return suo.mutation
}

// Save executes the query and returns the updated Student entity.
func (suo *StudentUpdateOne) Save(ctx context.Context) (*Student, error) {
	var (
		err  error
		node *Student
	)
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StudentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StudentUpdateOne) SaveX(ctx context.Context) *Student {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StudentUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StudentUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StudentUpdateOne) check() error {
	if v, ok := suo.mutation.ExamNum(); ok {
		if err := student.ExamNumValidator(v); err != nil {
			return &ValidationError{Name: "exam_num", err: fmt.Errorf("ent: validator failed for field \"exam_num\": %w", err)}
		}
	}
	return nil
}

func (suo *StudentUpdateOne) sqlSave(ctx context.Context) (_node *Student, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   student.Table,
			Columns: student.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: student.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Student.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.ExamNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldExamNum,
		})
	}
	if value, ok := suo.mutation.StudentName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldStudentName,
		})
	}
	if value, ok := suo.mutation.ClassName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldClassName,
		})
	}
	if value, ok := suo.mutation.ChineseScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldChineseScore,
		})
	}
	if value, ok := suo.mutation.MathScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldMathScore,
		})
	}
	if value, ok := suo.mutation.EnglishScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldEnglishScore,
		})
	}
	if value, ok := suo.mutation.TotalScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldTotalScore,
		})
	}
	if value, ok := suo.mutation.ClassRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldClassRate,
		})
	}
	if value, ok := suo.mutation.SchoolRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldSchoolRate,
		})
	}
	if value, ok := suo.mutation.StepRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldStepRank,
		})
	}
	if value, ok := suo.mutation.UploadDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldUploadDate,
		})
	}
	if value, ok := suo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldIsDeleted,
		})
	}
	if value, ok := suo.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldDeleteTime,
		})
	}
	_node = &Student{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{student.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
