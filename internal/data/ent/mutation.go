// Code generated by entc, DO NOT EDIT.

package ent

import (
	"AppFactory/internal/data/ent/predicate"
	"AppFactory/internal/data/ent/student"
	"context"
	"fmt"
	"sync"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeStudent = "Student"
)

// StudentMutation represents an operation that mutates the Student nodes in the graph.
type StudentMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	exam_num      *string
	student_name  *string
	class_name    *string
	chinese_score *string
	math_score    *string
	english_score *string
	total_score   *string
	class_rate    *string
	school_rate   *string
	step_rank     *string
	upload_date   *string
	is_deleted    *string
	delete_time   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Student, error)
	predicates    []predicate.Student
}

var _ ent.Mutation = (*StudentMutation)(nil)

// studentOption allows management of the mutation configuration using functional options.
type studentOption func(*StudentMutation)

// newStudentMutation creates new mutation for the Student entity.
func newStudentMutation(c config, op Op, opts ...studentOption) *StudentMutation {
	m := &StudentMutation{
		config:        c,
		op:            op,
		typ:           TypeStudent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStudentID sets the ID field of the mutation.
func withStudentID(id int64) studentOption {
	return func(m *StudentMutation) {
		var (
			err   error
			once  sync.Once
			value *Student
		)
		m.oldValue = func(ctx context.Context) (*Student, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Student.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStudent sets the old Student of the mutation.
func withStudent(node *Student) studentOption {
	return func(m *StudentMutation) {
		m.oldValue = func(context.Context) (*Student, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StudentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StudentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Student entities.
func (m *StudentMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *StudentMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetExamNum sets the "exam_num" field.
func (m *StudentMutation) SetExamNum(s string) {
	m.exam_num = &s
}

// ExamNum returns the value of the "exam_num" field in the mutation.
func (m *StudentMutation) ExamNum() (r string, exists bool) {
	v := m.exam_num
	if v == nil {
		return
	}
	return *v, true
}

// OldExamNum returns the old "exam_num" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldExamNum(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldExamNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldExamNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExamNum: %w", err)
	}
	return oldValue.ExamNum, nil
}

// ResetExamNum resets all changes to the "exam_num" field.
func (m *StudentMutation) ResetExamNum() {
	m.exam_num = nil
}

// SetStudentName sets the "student_name" field.
func (m *StudentMutation) SetStudentName(s string) {
	m.student_name = &s
}

// StudentName returns the value of the "student_name" field in the mutation.
func (m *StudentMutation) StudentName() (r string, exists bool) {
	v := m.student_name
	if v == nil {
		return
	}
	return *v, true
}

// OldStudentName returns the old "student_name" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldStudentName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStudentName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStudentName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStudentName: %w", err)
	}
	return oldValue.StudentName, nil
}

// ResetStudentName resets all changes to the "student_name" field.
func (m *StudentMutation) ResetStudentName() {
	m.student_name = nil
}

// SetClassName sets the "class_name" field.
func (m *StudentMutation) SetClassName(s string) {
	m.class_name = &s
}

// ClassName returns the value of the "class_name" field in the mutation.
func (m *StudentMutation) ClassName() (r string, exists bool) {
	v := m.class_name
	if v == nil {
		return
	}
	return *v, true
}

// OldClassName returns the old "class_name" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldClassName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldClassName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldClassName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClassName: %w", err)
	}
	return oldValue.ClassName, nil
}

// ResetClassName resets all changes to the "class_name" field.
func (m *StudentMutation) ResetClassName() {
	m.class_name = nil
}

// SetChineseScore sets the "chinese_score" field.
func (m *StudentMutation) SetChineseScore(s string) {
	m.chinese_score = &s
}

// ChineseScore returns the value of the "chinese_score" field in the mutation.
func (m *StudentMutation) ChineseScore() (r string, exists bool) {
	v := m.chinese_score
	if v == nil {
		return
	}
	return *v, true
}

// OldChineseScore returns the old "chinese_score" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldChineseScore(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldChineseScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldChineseScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChineseScore: %w", err)
	}
	return oldValue.ChineseScore, nil
}

// ResetChineseScore resets all changes to the "chinese_score" field.
func (m *StudentMutation) ResetChineseScore() {
	m.chinese_score = nil
}

// SetMathScore sets the "math_score" field.
func (m *StudentMutation) SetMathScore(s string) {
	m.math_score = &s
}

// MathScore returns the value of the "math_score" field in the mutation.
func (m *StudentMutation) MathScore() (r string, exists bool) {
	v := m.math_score
	if v == nil {
		return
	}
	return *v, true
}

// OldMathScore returns the old "math_score" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldMathScore(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMathScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMathScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMathScore: %w", err)
	}
	return oldValue.MathScore, nil
}

// ResetMathScore resets all changes to the "math_score" field.
func (m *StudentMutation) ResetMathScore() {
	m.math_score = nil
}

// SetEnglishScore sets the "english_score" field.
func (m *StudentMutation) SetEnglishScore(s string) {
	m.english_score = &s
}

// EnglishScore returns the value of the "english_score" field in the mutation.
func (m *StudentMutation) EnglishScore() (r string, exists bool) {
	v := m.english_score
	if v == nil {
		return
	}
	return *v, true
}

// OldEnglishScore returns the old "english_score" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldEnglishScore(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEnglishScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEnglishScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnglishScore: %w", err)
	}
	return oldValue.EnglishScore, nil
}

// ResetEnglishScore resets all changes to the "english_score" field.
func (m *StudentMutation) ResetEnglishScore() {
	m.english_score = nil
}

// SetTotalScore sets the "total_score" field.
func (m *StudentMutation) SetTotalScore(s string) {
	m.total_score = &s
}

// TotalScore returns the value of the "total_score" field in the mutation.
func (m *StudentMutation) TotalScore() (r string, exists bool) {
	v := m.total_score
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalScore returns the old "total_score" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldTotalScore(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTotalScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTotalScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalScore: %w", err)
	}
	return oldValue.TotalScore, nil
}

// ResetTotalScore resets all changes to the "total_score" field.
func (m *StudentMutation) ResetTotalScore() {
	m.total_score = nil
}

// SetClassRate sets the "class_rate" field.
func (m *StudentMutation) SetClassRate(s string) {
	m.class_rate = &s
}

// ClassRate returns the value of the "class_rate" field in the mutation.
func (m *StudentMutation) ClassRate() (r string, exists bool) {
	v := m.class_rate
	if v == nil {
		return
	}
	return *v, true
}

// OldClassRate returns the old "class_rate" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldClassRate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldClassRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldClassRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClassRate: %w", err)
	}
	return oldValue.ClassRate, nil
}

// ResetClassRate resets all changes to the "class_rate" field.
func (m *StudentMutation) ResetClassRate() {
	m.class_rate = nil
}

// SetSchoolRate sets the "school_rate" field.
func (m *StudentMutation) SetSchoolRate(s string) {
	m.school_rate = &s
}

// SchoolRate returns the value of the "school_rate" field in the mutation.
func (m *StudentMutation) SchoolRate() (r string, exists bool) {
	v := m.school_rate
	if v == nil {
		return
	}
	return *v, true
}

// OldSchoolRate returns the old "school_rate" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldSchoolRate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSchoolRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSchoolRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSchoolRate: %w", err)
	}
	return oldValue.SchoolRate, nil
}

// ResetSchoolRate resets all changes to the "school_rate" field.
func (m *StudentMutation) ResetSchoolRate() {
	m.school_rate = nil
}

// SetStepRank sets the "step_rank" field.
func (m *StudentMutation) SetStepRank(s string) {
	m.step_rank = &s
}

// StepRank returns the value of the "step_rank" field in the mutation.
func (m *StudentMutation) StepRank() (r string, exists bool) {
	v := m.step_rank
	if v == nil {
		return
	}
	return *v, true
}

// OldStepRank returns the old "step_rank" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldStepRank(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStepRank is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStepRank requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStepRank: %w", err)
	}
	return oldValue.StepRank, nil
}

// ResetStepRank resets all changes to the "step_rank" field.
func (m *StudentMutation) ResetStepRank() {
	m.step_rank = nil
}

// SetUploadDate sets the "upload_date" field.
func (m *StudentMutation) SetUploadDate(s string) {
	m.upload_date = &s
}

// UploadDate returns the value of the "upload_date" field in the mutation.
func (m *StudentMutation) UploadDate() (r string, exists bool) {
	v := m.upload_date
	if v == nil {
		return
	}
	return *v, true
}

// OldUploadDate returns the old "upload_date" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldUploadDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUploadDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUploadDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUploadDate: %w", err)
	}
	return oldValue.UploadDate, nil
}

// ResetUploadDate resets all changes to the "upload_date" field.
func (m *StudentMutation) ResetUploadDate() {
	m.upload_date = nil
}

// SetIsDeleted sets the "is_deleted" field.
func (m *StudentMutation) SetIsDeleted(s string) {
	m.is_deleted = &s
}

// IsDeleted returns the value of the "is_deleted" field in the mutation.
func (m *StudentMutation) IsDeleted() (r string, exists bool) {
	v := m.is_deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDeleted returns the old "is_deleted" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldIsDeleted(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDeleted: %w", err)
	}
	return oldValue.IsDeleted, nil
}

// ResetIsDeleted resets all changes to the "is_deleted" field.
func (m *StudentMutation) ResetIsDeleted() {
	m.is_deleted = nil
}

// SetDeleteTime sets the "delete_time" field.
func (m *StudentMutation) SetDeleteTime(s string) {
	m.delete_time = &s
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *StudentMutation) DeleteTime() (r string, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldDeleteTime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *StudentMutation) ResetDeleteTime() {
	m.delete_time = nil
}

// Op returns the operation name.
func (m *StudentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Student).
func (m *StudentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StudentMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.exam_num != nil {
		fields = append(fields, student.FieldExamNum)
	}
	if m.student_name != nil {
		fields = append(fields, student.FieldStudentName)
	}
	if m.class_name != nil {
		fields = append(fields, student.FieldClassName)
	}
	if m.chinese_score != nil {
		fields = append(fields, student.FieldChineseScore)
	}
	if m.math_score != nil {
		fields = append(fields, student.FieldMathScore)
	}
	if m.english_score != nil {
		fields = append(fields, student.FieldEnglishScore)
	}
	if m.total_score != nil {
		fields = append(fields, student.FieldTotalScore)
	}
	if m.class_rate != nil {
		fields = append(fields, student.FieldClassRate)
	}
	if m.school_rate != nil {
		fields = append(fields, student.FieldSchoolRate)
	}
	if m.step_rank != nil {
		fields = append(fields, student.FieldStepRank)
	}
	if m.upload_date != nil {
		fields = append(fields, student.FieldUploadDate)
	}
	if m.is_deleted != nil {
		fields = append(fields, student.FieldIsDeleted)
	}
	if m.delete_time != nil {
		fields = append(fields, student.FieldDeleteTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StudentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case student.FieldExamNum:
		return m.ExamNum()
	case student.FieldStudentName:
		return m.StudentName()
	case student.FieldClassName:
		return m.ClassName()
	case student.FieldChineseScore:
		return m.ChineseScore()
	case student.FieldMathScore:
		return m.MathScore()
	case student.FieldEnglishScore:
		return m.EnglishScore()
	case student.FieldTotalScore:
		return m.TotalScore()
	case student.FieldClassRate:
		return m.ClassRate()
	case student.FieldSchoolRate:
		return m.SchoolRate()
	case student.FieldStepRank:
		return m.StepRank()
	case student.FieldUploadDate:
		return m.UploadDate()
	case student.FieldIsDeleted:
		return m.IsDeleted()
	case student.FieldDeleteTime:
		return m.DeleteTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StudentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case student.FieldExamNum:
		return m.OldExamNum(ctx)
	case student.FieldStudentName:
		return m.OldStudentName(ctx)
	case student.FieldClassName:
		return m.OldClassName(ctx)
	case student.FieldChineseScore:
		return m.OldChineseScore(ctx)
	case student.FieldMathScore:
		return m.OldMathScore(ctx)
	case student.FieldEnglishScore:
		return m.OldEnglishScore(ctx)
	case student.FieldTotalScore:
		return m.OldTotalScore(ctx)
	case student.FieldClassRate:
		return m.OldClassRate(ctx)
	case student.FieldSchoolRate:
		return m.OldSchoolRate(ctx)
	case student.FieldStepRank:
		return m.OldStepRank(ctx)
	case student.FieldUploadDate:
		return m.OldUploadDate(ctx)
	case student.FieldIsDeleted:
		return m.OldIsDeleted(ctx)
	case student.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	}
	return nil, fmt.Errorf("unknown Student field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case student.FieldExamNum:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExamNum(v)
		return nil
	case student.FieldStudentName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStudentName(v)
		return nil
	case student.FieldClassName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClassName(v)
		return nil
	case student.FieldChineseScore:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChineseScore(v)
		return nil
	case student.FieldMathScore:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMathScore(v)
		return nil
	case student.FieldEnglishScore:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnglishScore(v)
		return nil
	case student.FieldTotalScore:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalScore(v)
		return nil
	case student.FieldClassRate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClassRate(v)
		return nil
	case student.FieldSchoolRate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSchoolRate(v)
		return nil
	case student.FieldStepRank:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStepRank(v)
		return nil
	case student.FieldUploadDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUploadDate(v)
		return nil
	case student.FieldIsDeleted:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDeleted(v)
		return nil
	case student.FieldDeleteTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	}
	return fmt.Errorf("unknown Student field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StudentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StudentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Student numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StudentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StudentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StudentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Student nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StudentMutation) ResetField(name string) error {
	switch name {
	case student.FieldExamNum:
		m.ResetExamNum()
		return nil
	case student.FieldStudentName:
		m.ResetStudentName()
		return nil
	case student.FieldClassName:
		m.ResetClassName()
		return nil
	case student.FieldChineseScore:
		m.ResetChineseScore()
		return nil
	case student.FieldMathScore:
		m.ResetMathScore()
		return nil
	case student.FieldEnglishScore:
		m.ResetEnglishScore()
		return nil
	case student.FieldTotalScore:
		m.ResetTotalScore()
		return nil
	case student.FieldClassRate:
		m.ResetClassRate()
		return nil
	case student.FieldSchoolRate:
		m.ResetSchoolRate()
		return nil
	case student.FieldStepRank:
		m.ResetStepRank()
		return nil
	case student.FieldUploadDate:
		m.ResetUploadDate()
		return nil
	case student.FieldIsDeleted:
		m.ResetIsDeleted()
		return nil
	case student.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	}
	return fmt.Errorf("unknown Student field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StudentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StudentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StudentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StudentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StudentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StudentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StudentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Student unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StudentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Student edge %s", name)
}
