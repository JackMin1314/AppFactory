// Code generated by entc, DO NOT EDIT.

package ent

import (
	"AppFactory/internal/data/ent/student"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Student is the model entity for the Student schema.
type Student struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// ExamNum holds the value of the "exam_num" field.
	ExamNum string `json:"exam_num,omitempty"`
	// StudentName holds the value of the "student_name" field.
	StudentName string `json:"student_name,omitempty"`
	// ClassName holds the value of the "class_name" field.
	ClassName string `json:"class_name,omitempty"`
	// ChineseScore holds the value of the "chinese_score" field.
	ChineseScore string `json:"chinese_score,omitempty"`
	// MathScore holds the value of the "math_score" field.
	MathScore string `json:"math_score,omitempty"`
	// EnglishScore holds the value of the "english_score" field.
	EnglishScore string `json:"english_score,omitempty"`
	// TotalScore holds the value of the "total_score" field.
	TotalScore string `json:"total_score,omitempty"`
	// ClassRate holds the value of the "class_rate" field.
	ClassRate string `json:"class_rate,omitempty"`
	// SchoolRate holds the value of the "school_rate" field.
	SchoolRate string `json:"school_rate,omitempty"`
	// StepRank holds the value of the "step_rank" field.
	StepRank string `json:"step_rank,omitempty"`
	// UploadDate holds the value of the "upload_date" field.
	UploadDate string `json:"upload_date,omitempty"`
	// IsDeleted holds the value of the "is_deleted" field.
	IsDeleted string `json:"is_deleted,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime string `json:"delete_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Student) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case student.FieldID:
			values[i] = &sql.NullInt64{}
		case student.FieldExamNum, student.FieldStudentName, student.FieldClassName, student.FieldChineseScore, student.FieldMathScore, student.FieldEnglishScore, student.FieldTotalScore, student.FieldClassRate, student.FieldSchoolRate, student.FieldStepRank, student.FieldUploadDate, student.FieldIsDeleted, student.FieldDeleteTime:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Student", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Student fields.
func (s *Student) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case student.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int64(value.Int64)
		case student.FieldExamNum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field exam_num", values[i])
			} else if value.Valid {
				s.ExamNum = value.String
			}
		case student.FieldStudentName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field student_name", values[i])
			} else if value.Valid {
				s.StudentName = value.String
			}
		case student.FieldClassName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field class_name", values[i])
			} else if value.Valid {
				s.ClassName = value.String
			}
		case student.FieldChineseScore:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chinese_score", values[i])
			} else if value.Valid {
				s.ChineseScore = value.String
			}
		case student.FieldMathScore:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field math_score", values[i])
			} else if value.Valid {
				s.MathScore = value.String
			}
		case student.FieldEnglishScore:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field english_score", values[i])
			} else if value.Valid {
				s.EnglishScore = value.String
			}
		case student.FieldTotalScore:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field total_score", values[i])
			} else if value.Valid {
				s.TotalScore = value.String
			}
		case student.FieldClassRate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field class_rate", values[i])
			} else if value.Valid {
				s.ClassRate = value.String
			}
		case student.FieldSchoolRate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field school_rate", values[i])
			} else if value.Valid {
				s.SchoolRate = value.String
			}
		case student.FieldStepRank:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field step_rank", values[i])
			} else if value.Valid {
				s.StepRank = value.String
			}
		case student.FieldUploadDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field upload_date", values[i])
			} else if value.Valid {
				s.UploadDate = value.String
			}
		case student.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				s.IsDeleted = value.String
			}
		case student.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				s.DeleteTime = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Student.
// Note that you need to call Student.Unwrap() before calling this method if this Student
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Student) Update() *StudentUpdateOne {
	return (&StudentClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Student entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Student) Unwrap() *Student {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Student is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Student) String() string {
	var builder strings.Builder
	builder.WriteString("Student(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", exam_num=")
	builder.WriteString(s.ExamNum)
	builder.WriteString(", student_name=")
	builder.WriteString(s.StudentName)
	builder.WriteString(", class_name=")
	builder.WriteString(s.ClassName)
	builder.WriteString(", chinese_score=")
	builder.WriteString(s.ChineseScore)
	builder.WriteString(", math_score=")
	builder.WriteString(s.MathScore)
	builder.WriteString(", english_score=")
	builder.WriteString(s.EnglishScore)
	builder.WriteString(", total_score=")
	builder.WriteString(s.TotalScore)
	builder.WriteString(", class_rate=")
	builder.WriteString(s.ClassRate)
	builder.WriteString(", school_rate=")
	builder.WriteString(s.SchoolRate)
	builder.WriteString(", step_rank=")
	builder.WriteString(s.StepRank)
	builder.WriteString(", upload_date=")
	builder.WriteString(s.UploadDate)
	builder.WriteString(", is_deleted=")
	builder.WriteString(s.IsDeleted)
	builder.WriteString(", delete_time=")
	builder.WriteString(s.DeleteTime)
	builder.WriteByte(')')
	return builder.String()
}

// Students is a parsable slice of Student.
type Students []*Student

func (s Students) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
