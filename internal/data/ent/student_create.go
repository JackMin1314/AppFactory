// Code generated by entc, DO NOT EDIT.

package ent

import (
	"AppFactory/internal/data/ent/student"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StudentCreate is the builder for creating a Student entity.
type StudentCreate struct {
	config
	mutation *StudentMutation
	hooks    []Hook
}

// SetExamNum sets the "exam_num" field.
func (sc *StudentCreate) SetExamNum(s string) *StudentCreate {
	sc.mutation.SetExamNum(s)
	return sc
}

// SetStudentName sets the "student_name" field.
func (sc *StudentCreate) SetStudentName(s string) *StudentCreate {
	sc.mutation.SetStudentName(s)
	return sc
}

// SetClassName sets the "class_name" field.
func (sc *StudentCreate) SetClassName(s string) *StudentCreate {
	sc.mutation.SetClassName(s)
	return sc
}

// SetChineseScore sets the "chinese_score" field.
func (sc *StudentCreate) SetChineseScore(s string) *StudentCreate {
	sc.mutation.SetChineseScore(s)
	return sc
}

// SetNillableChineseScore sets the "chinese_score" field if the given value is not nil.
func (sc *StudentCreate) SetNillableChineseScore(s *string) *StudentCreate {
	if s != nil {
		sc.SetChineseScore(*s)
	}
	return sc
}

// SetMathScore sets the "math_score" field.
func (sc *StudentCreate) SetMathScore(s string) *StudentCreate {
	sc.mutation.SetMathScore(s)
	return sc
}

// SetNillableMathScore sets the "math_score" field if the given value is not nil.
func (sc *StudentCreate) SetNillableMathScore(s *string) *StudentCreate {
	if s != nil {
		sc.SetMathScore(*s)
	}
	return sc
}

// SetEnglishScore sets the "english_score" field.
func (sc *StudentCreate) SetEnglishScore(s string) *StudentCreate {
	sc.mutation.SetEnglishScore(s)
	return sc
}

// SetNillableEnglishScore sets the "english_score" field if the given value is not nil.
func (sc *StudentCreate) SetNillableEnglishScore(s *string) *StudentCreate {
	if s != nil {
		sc.SetEnglishScore(*s)
	}
	return sc
}

// SetTotalScore sets the "total_score" field.
func (sc *StudentCreate) SetTotalScore(s string) *StudentCreate {
	sc.mutation.SetTotalScore(s)
	return sc
}

// SetNillableTotalScore sets the "total_score" field if the given value is not nil.
func (sc *StudentCreate) SetNillableTotalScore(s *string) *StudentCreate {
	if s != nil {
		sc.SetTotalScore(*s)
	}
	return sc
}

// SetClassRate sets the "class_rate" field.
func (sc *StudentCreate) SetClassRate(s string) *StudentCreate {
	sc.mutation.SetClassRate(s)
	return sc
}

// SetNillableClassRate sets the "class_rate" field if the given value is not nil.
func (sc *StudentCreate) SetNillableClassRate(s *string) *StudentCreate {
	if s != nil {
		sc.SetClassRate(*s)
	}
	return sc
}

// SetSchoolRate sets the "school_rate" field.
func (sc *StudentCreate) SetSchoolRate(s string) *StudentCreate {
	sc.mutation.SetSchoolRate(s)
	return sc
}

// SetNillableSchoolRate sets the "school_rate" field if the given value is not nil.
func (sc *StudentCreate) SetNillableSchoolRate(s *string) *StudentCreate {
	if s != nil {
		sc.SetSchoolRate(*s)
	}
	return sc
}

// SetStepRank sets the "step_rank" field.
func (sc *StudentCreate) SetStepRank(s string) *StudentCreate {
	sc.mutation.SetStepRank(s)
	return sc
}

// SetNillableStepRank sets the "step_rank" field if the given value is not nil.
func (sc *StudentCreate) SetNillableStepRank(s *string) *StudentCreate {
	if s != nil {
		sc.SetStepRank(*s)
	}
	return sc
}

// SetUploadDate sets the "upload_date" field.
func (sc *StudentCreate) SetUploadDate(s string) *StudentCreate {
	sc.mutation.SetUploadDate(s)
	return sc
}

// SetIsDeleted sets the "is_deleted" field.
func (sc *StudentCreate) SetIsDeleted(s string) *StudentCreate {
	sc.mutation.SetIsDeleted(s)
	return sc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (sc *StudentCreate) SetNillableIsDeleted(s *string) *StudentCreate {
	if s != nil {
		sc.SetIsDeleted(*s)
	}
	return sc
}

// SetDeleteTime sets the "delete_time" field.
func (sc *StudentCreate) SetDeleteTime(s string) *StudentCreate {
	sc.mutation.SetDeleteTime(s)
	return sc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (sc *StudentCreate) SetNillableDeleteTime(s *string) *StudentCreate {
	if s != nil {
		sc.SetDeleteTime(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *StudentCreate) SetID(i int64) *StudentCreate {
	sc.mutation.SetID(i)
	return sc
}

// Mutation returns the StudentMutation object of the builder.
func (sc *StudentCreate) Mutation() *StudentMutation {
	return sc.mutation
}

// Save creates the Student in the database.
func (sc *StudentCreate) Save(ctx context.Context) (*Student, error) {
	var (
		err  error
		node *Student
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StudentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StudentCreate) SaveX(ctx context.Context) *Student {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (sc *StudentCreate) defaults() {
	if _, ok := sc.mutation.ChineseScore(); !ok {
		v := student.DefaultChineseScore
		sc.mutation.SetChineseScore(v)
	}
	if _, ok := sc.mutation.MathScore(); !ok {
		v := student.DefaultMathScore
		sc.mutation.SetMathScore(v)
	}
	if _, ok := sc.mutation.EnglishScore(); !ok {
		v := student.DefaultEnglishScore
		sc.mutation.SetEnglishScore(v)
	}
	if _, ok := sc.mutation.TotalScore(); !ok {
		v := student.DefaultTotalScore
		sc.mutation.SetTotalScore(v)
	}
	if _, ok := sc.mutation.ClassRate(); !ok {
		v := student.DefaultClassRate
		sc.mutation.SetClassRate(v)
	}
	if _, ok := sc.mutation.SchoolRate(); !ok {
		v := student.DefaultSchoolRate
		sc.mutation.SetSchoolRate(v)
	}
	if _, ok := sc.mutation.StepRank(); !ok {
		v := student.DefaultStepRank
		sc.mutation.SetStepRank(v)
	}
	if _, ok := sc.mutation.IsDeleted(); !ok {
		v := student.DefaultIsDeleted
		sc.mutation.SetIsDeleted(v)
	}
	if _, ok := sc.mutation.DeleteTime(); !ok {
		v := student.DefaultDeleteTime
		sc.mutation.SetDeleteTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StudentCreate) check() error {
	if _, ok := sc.mutation.ExamNum(); !ok {
		return &ValidationError{Name: "exam_num", err: errors.New("ent: missing required field \"exam_num\"")}
	}
	if v, ok := sc.mutation.ExamNum(); ok {
		if err := student.ExamNumValidator(v); err != nil {
			return &ValidationError{Name: "exam_num", err: fmt.Errorf("ent: validator failed for field \"exam_num\": %w", err)}
		}
	}
	if _, ok := sc.mutation.StudentName(); !ok {
		return &ValidationError{Name: "student_name", err: errors.New("ent: missing required field \"student_name\"")}
	}
	if _, ok := sc.mutation.ClassName(); !ok {
		return &ValidationError{Name: "class_name", err: errors.New("ent: missing required field \"class_name\"")}
	}
	if _, ok := sc.mutation.ChineseScore(); !ok {
		return &ValidationError{Name: "chinese_score", err: errors.New("ent: missing required field \"chinese_score\"")}
	}
	if _, ok := sc.mutation.MathScore(); !ok {
		return &ValidationError{Name: "math_score", err: errors.New("ent: missing required field \"math_score\"")}
	}
	if _, ok := sc.mutation.EnglishScore(); !ok {
		return &ValidationError{Name: "english_score", err: errors.New("ent: missing required field \"english_score\"")}
	}
	if _, ok := sc.mutation.TotalScore(); !ok {
		return &ValidationError{Name: "total_score", err: errors.New("ent: missing required field \"total_score\"")}
	}
	if _, ok := sc.mutation.ClassRate(); !ok {
		return &ValidationError{Name: "class_rate", err: errors.New("ent: missing required field \"class_rate\"")}
	}
	if _, ok := sc.mutation.SchoolRate(); !ok {
		return &ValidationError{Name: "school_rate", err: errors.New("ent: missing required field \"school_rate\"")}
	}
	if _, ok := sc.mutation.StepRank(); !ok {
		return &ValidationError{Name: "step_rank", err: errors.New("ent: missing required field \"step_rank\"")}
	}
	if _, ok := sc.mutation.UploadDate(); !ok {
		return &ValidationError{Name: "upload_date", err: errors.New("ent: missing required field \"upload_date\"")}
	}
	if _, ok := sc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New("ent: missing required field \"is_deleted\"")}
	}
	if _, ok := sc.mutation.DeleteTime(); !ok {
		return &ValidationError{Name: "delete_time", err: errors.New("ent: missing required field \"delete_time\"")}
	}
	return nil
}

func (sc *StudentCreate) sqlSave(ctx context.Context) (*Student, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (sc *StudentCreate) createSpec() (*Student, *sqlgraph.CreateSpec) {
	var (
		_node = &Student{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: student.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: student.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.ExamNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldExamNum,
		})
		_node.ExamNum = value
	}
	if value, ok := sc.mutation.StudentName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldStudentName,
		})
		_node.StudentName = value
	}
	if value, ok := sc.mutation.ClassName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldClassName,
		})
		_node.ClassName = value
	}
	if value, ok := sc.mutation.ChineseScore(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldChineseScore,
		})
		_node.ChineseScore = value
	}
	if value, ok := sc.mutation.MathScore(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldMathScore,
		})
		_node.MathScore = value
	}
	if value, ok := sc.mutation.EnglishScore(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldEnglishScore,
		})
		_node.EnglishScore = value
	}
	if value, ok := sc.mutation.TotalScore(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldTotalScore,
		})
		_node.TotalScore = value
	}
	if value, ok := sc.mutation.ClassRate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldClassRate,
		})
		_node.ClassRate = value
	}
	if value, ok := sc.mutation.SchoolRate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldSchoolRate,
		})
		_node.SchoolRate = value
	}
	if value, ok := sc.mutation.StepRank(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldStepRank,
		})
		_node.StepRank = value
	}
	if value, ok := sc.mutation.UploadDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldUploadDate,
		})
		_node.UploadDate = value
	}
	if value, ok := sc.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldIsDeleted,
		})
		_node.IsDeleted = value
	}
	if value, ok := sc.mutation.DeleteTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldDeleteTime,
		})
		_node.DeleteTime = value
	}
	return _node, _spec
}

// StudentCreateBulk is the builder for creating many Student entities in bulk.
type StudentCreateBulk struct {
	config
	builders []*StudentCreate
}

// Save creates the Student entities in the database.
func (scb *StudentCreateBulk) Save(ctx context.Context) ([]*Student, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Student, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StudentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StudentCreateBulk) SaveX(ctx context.Context) []*Student {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
