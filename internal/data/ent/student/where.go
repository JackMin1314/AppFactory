// Code generated by entc, DO NOT EDIT.

package student

import (
	"AppFactory/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ExamNum applies equality check predicate on the "exam_num" field. It's identical to ExamNumEQ.
func ExamNum(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExamNum), v))
	})
}

// StudentName applies equality check predicate on the "student_name" field. It's identical to StudentNameEQ.
func StudentName(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStudentName), v))
	})
}

// ClassName applies equality check predicate on the "class_name" field. It's identical to ClassNameEQ.
func ClassName(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassName), v))
	})
}

// ChineseScore applies equality check predicate on the "chinese_score" field. It's identical to ChineseScoreEQ.
func ChineseScore(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChineseScore), v))
	})
}

// MathScore applies equality check predicate on the "math_score" field. It's identical to MathScoreEQ.
func MathScore(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMathScore), v))
	})
}

// EnglishScore applies equality check predicate on the "english_score" field. It's identical to EnglishScoreEQ.
func EnglishScore(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnglishScore), v))
	})
}

// TotalScore applies equality check predicate on the "total_score" field. It's identical to TotalScoreEQ.
func TotalScore(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalScore), v))
	})
}

// ClassRate applies equality check predicate on the "class_rate" field. It's identical to ClassRateEQ.
func ClassRate(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassRate), v))
	})
}

// SchoolRate applies equality check predicate on the "school_rate" field. It's identical to SchoolRateEQ.
func SchoolRate(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSchoolRate), v))
	})
}

// StepRank applies equality check predicate on the "step_rank" field. It's identical to StepRankEQ.
func StepRank(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStepRank), v))
	})
}

// UploadDate applies equality check predicate on the "upload_date" field. It's identical to UploadDateEQ.
func UploadDate(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUploadDate), v))
	})
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteTime), v))
	})
}

// ExamNumEQ applies the EQ predicate on the "exam_num" field.
func ExamNumEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExamNum), v))
	})
}

// ExamNumNEQ applies the NEQ predicate on the "exam_num" field.
func ExamNumNEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExamNum), v))
	})
}

// ExamNumIn applies the In predicate on the "exam_num" field.
func ExamNumIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExamNum), v...))
	})
}

// ExamNumNotIn applies the NotIn predicate on the "exam_num" field.
func ExamNumNotIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExamNum), v...))
	})
}

// ExamNumGT applies the GT predicate on the "exam_num" field.
func ExamNumGT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExamNum), v))
	})
}

// ExamNumGTE applies the GTE predicate on the "exam_num" field.
func ExamNumGTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExamNum), v))
	})
}

// ExamNumLT applies the LT predicate on the "exam_num" field.
func ExamNumLT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExamNum), v))
	})
}

// ExamNumLTE applies the LTE predicate on the "exam_num" field.
func ExamNumLTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExamNum), v))
	})
}

// ExamNumContains applies the Contains predicate on the "exam_num" field.
func ExamNumContains(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExamNum), v))
	})
}

// ExamNumHasPrefix applies the HasPrefix predicate on the "exam_num" field.
func ExamNumHasPrefix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExamNum), v))
	})
}

// ExamNumHasSuffix applies the HasSuffix predicate on the "exam_num" field.
func ExamNumHasSuffix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExamNum), v))
	})
}

// ExamNumEqualFold applies the EqualFold predicate on the "exam_num" field.
func ExamNumEqualFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExamNum), v))
	})
}

// ExamNumContainsFold applies the ContainsFold predicate on the "exam_num" field.
func ExamNumContainsFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExamNum), v))
	})
}

// StudentNameEQ applies the EQ predicate on the "student_name" field.
func StudentNameEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStudentName), v))
	})
}

// StudentNameNEQ applies the NEQ predicate on the "student_name" field.
func StudentNameNEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStudentName), v))
	})
}

// StudentNameIn applies the In predicate on the "student_name" field.
func StudentNameIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStudentName), v...))
	})
}

// StudentNameNotIn applies the NotIn predicate on the "student_name" field.
func StudentNameNotIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStudentName), v...))
	})
}

// StudentNameGT applies the GT predicate on the "student_name" field.
func StudentNameGT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStudentName), v))
	})
}

// StudentNameGTE applies the GTE predicate on the "student_name" field.
func StudentNameGTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStudentName), v))
	})
}

// StudentNameLT applies the LT predicate on the "student_name" field.
func StudentNameLT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStudentName), v))
	})
}

// StudentNameLTE applies the LTE predicate on the "student_name" field.
func StudentNameLTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStudentName), v))
	})
}

// StudentNameContains applies the Contains predicate on the "student_name" field.
func StudentNameContains(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStudentName), v))
	})
}

// StudentNameHasPrefix applies the HasPrefix predicate on the "student_name" field.
func StudentNameHasPrefix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStudentName), v))
	})
}

// StudentNameHasSuffix applies the HasSuffix predicate on the "student_name" field.
func StudentNameHasSuffix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStudentName), v))
	})
}

// StudentNameEqualFold applies the EqualFold predicate on the "student_name" field.
func StudentNameEqualFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStudentName), v))
	})
}

// StudentNameContainsFold applies the ContainsFold predicate on the "student_name" field.
func StudentNameContainsFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStudentName), v))
	})
}

// ClassNameEQ applies the EQ predicate on the "class_name" field.
func ClassNameEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassName), v))
	})
}

// ClassNameNEQ applies the NEQ predicate on the "class_name" field.
func ClassNameNEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClassName), v))
	})
}

// ClassNameIn applies the In predicate on the "class_name" field.
func ClassNameIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClassName), v...))
	})
}

// ClassNameNotIn applies the NotIn predicate on the "class_name" field.
func ClassNameNotIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClassName), v...))
	})
}

// ClassNameGT applies the GT predicate on the "class_name" field.
func ClassNameGT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClassName), v))
	})
}

// ClassNameGTE applies the GTE predicate on the "class_name" field.
func ClassNameGTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClassName), v))
	})
}

// ClassNameLT applies the LT predicate on the "class_name" field.
func ClassNameLT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClassName), v))
	})
}

// ClassNameLTE applies the LTE predicate on the "class_name" field.
func ClassNameLTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClassName), v))
	})
}

// ClassNameContains applies the Contains predicate on the "class_name" field.
func ClassNameContains(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClassName), v))
	})
}

// ClassNameHasPrefix applies the HasPrefix predicate on the "class_name" field.
func ClassNameHasPrefix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClassName), v))
	})
}

// ClassNameHasSuffix applies the HasSuffix predicate on the "class_name" field.
func ClassNameHasSuffix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClassName), v))
	})
}

// ClassNameEqualFold applies the EqualFold predicate on the "class_name" field.
func ClassNameEqualFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClassName), v))
	})
}

// ClassNameContainsFold applies the ContainsFold predicate on the "class_name" field.
func ClassNameContainsFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClassName), v))
	})
}

// ChineseScoreEQ applies the EQ predicate on the "chinese_score" field.
func ChineseScoreEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChineseScore), v))
	})
}

// ChineseScoreNEQ applies the NEQ predicate on the "chinese_score" field.
func ChineseScoreNEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChineseScore), v))
	})
}

// ChineseScoreIn applies the In predicate on the "chinese_score" field.
func ChineseScoreIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChineseScore), v...))
	})
}

// ChineseScoreNotIn applies the NotIn predicate on the "chinese_score" field.
func ChineseScoreNotIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChineseScore), v...))
	})
}

// ChineseScoreGT applies the GT predicate on the "chinese_score" field.
func ChineseScoreGT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChineseScore), v))
	})
}

// ChineseScoreGTE applies the GTE predicate on the "chinese_score" field.
func ChineseScoreGTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChineseScore), v))
	})
}

// ChineseScoreLT applies the LT predicate on the "chinese_score" field.
func ChineseScoreLT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChineseScore), v))
	})
}

// ChineseScoreLTE applies the LTE predicate on the "chinese_score" field.
func ChineseScoreLTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChineseScore), v))
	})
}

// ChineseScoreContains applies the Contains predicate on the "chinese_score" field.
func ChineseScoreContains(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChineseScore), v))
	})
}

// ChineseScoreHasPrefix applies the HasPrefix predicate on the "chinese_score" field.
func ChineseScoreHasPrefix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChineseScore), v))
	})
}

// ChineseScoreHasSuffix applies the HasSuffix predicate on the "chinese_score" field.
func ChineseScoreHasSuffix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChineseScore), v))
	})
}

// ChineseScoreEqualFold applies the EqualFold predicate on the "chinese_score" field.
func ChineseScoreEqualFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChineseScore), v))
	})
}

// ChineseScoreContainsFold applies the ContainsFold predicate on the "chinese_score" field.
func ChineseScoreContainsFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChineseScore), v))
	})
}

// MathScoreEQ applies the EQ predicate on the "math_score" field.
func MathScoreEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMathScore), v))
	})
}

// MathScoreNEQ applies the NEQ predicate on the "math_score" field.
func MathScoreNEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMathScore), v))
	})
}

// MathScoreIn applies the In predicate on the "math_score" field.
func MathScoreIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMathScore), v...))
	})
}

// MathScoreNotIn applies the NotIn predicate on the "math_score" field.
func MathScoreNotIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMathScore), v...))
	})
}

// MathScoreGT applies the GT predicate on the "math_score" field.
func MathScoreGT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMathScore), v))
	})
}

// MathScoreGTE applies the GTE predicate on the "math_score" field.
func MathScoreGTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMathScore), v))
	})
}

// MathScoreLT applies the LT predicate on the "math_score" field.
func MathScoreLT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMathScore), v))
	})
}

// MathScoreLTE applies the LTE predicate on the "math_score" field.
func MathScoreLTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMathScore), v))
	})
}

// MathScoreContains applies the Contains predicate on the "math_score" field.
func MathScoreContains(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMathScore), v))
	})
}

// MathScoreHasPrefix applies the HasPrefix predicate on the "math_score" field.
func MathScoreHasPrefix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMathScore), v))
	})
}

// MathScoreHasSuffix applies the HasSuffix predicate on the "math_score" field.
func MathScoreHasSuffix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMathScore), v))
	})
}

// MathScoreEqualFold applies the EqualFold predicate on the "math_score" field.
func MathScoreEqualFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMathScore), v))
	})
}

// MathScoreContainsFold applies the ContainsFold predicate on the "math_score" field.
func MathScoreContainsFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMathScore), v))
	})
}

// EnglishScoreEQ applies the EQ predicate on the "english_score" field.
func EnglishScoreEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnglishScore), v))
	})
}

// EnglishScoreNEQ applies the NEQ predicate on the "english_score" field.
func EnglishScoreNEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnglishScore), v))
	})
}

// EnglishScoreIn applies the In predicate on the "english_score" field.
func EnglishScoreIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEnglishScore), v...))
	})
}

// EnglishScoreNotIn applies the NotIn predicate on the "english_score" field.
func EnglishScoreNotIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEnglishScore), v...))
	})
}

// EnglishScoreGT applies the GT predicate on the "english_score" field.
func EnglishScoreGT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEnglishScore), v))
	})
}

// EnglishScoreGTE applies the GTE predicate on the "english_score" field.
func EnglishScoreGTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEnglishScore), v))
	})
}

// EnglishScoreLT applies the LT predicate on the "english_score" field.
func EnglishScoreLT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEnglishScore), v))
	})
}

// EnglishScoreLTE applies the LTE predicate on the "english_score" field.
func EnglishScoreLTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEnglishScore), v))
	})
}

// EnglishScoreContains applies the Contains predicate on the "english_score" field.
func EnglishScoreContains(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEnglishScore), v))
	})
}

// EnglishScoreHasPrefix applies the HasPrefix predicate on the "english_score" field.
func EnglishScoreHasPrefix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEnglishScore), v))
	})
}

// EnglishScoreHasSuffix applies the HasSuffix predicate on the "english_score" field.
func EnglishScoreHasSuffix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEnglishScore), v))
	})
}

// EnglishScoreEqualFold applies the EqualFold predicate on the "english_score" field.
func EnglishScoreEqualFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEnglishScore), v))
	})
}

// EnglishScoreContainsFold applies the ContainsFold predicate on the "english_score" field.
func EnglishScoreContainsFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEnglishScore), v))
	})
}

// TotalScoreEQ applies the EQ predicate on the "total_score" field.
func TotalScoreEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalScore), v))
	})
}

// TotalScoreNEQ applies the NEQ predicate on the "total_score" field.
func TotalScoreNEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalScore), v))
	})
}

// TotalScoreIn applies the In predicate on the "total_score" field.
func TotalScoreIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotalScore), v...))
	})
}

// TotalScoreNotIn applies the NotIn predicate on the "total_score" field.
func TotalScoreNotIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotalScore), v...))
	})
}

// TotalScoreGT applies the GT predicate on the "total_score" field.
func TotalScoreGT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalScore), v))
	})
}

// TotalScoreGTE applies the GTE predicate on the "total_score" field.
func TotalScoreGTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalScore), v))
	})
}

// TotalScoreLT applies the LT predicate on the "total_score" field.
func TotalScoreLT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalScore), v))
	})
}

// TotalScoreLTE applies the LTE predicate on the "total_score" field.
func TotalScoreLTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalScore), v))
	})
}

// TotalScoreContains applies the Contains predicate on the "total_score" field.
func TotalScoreContains(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTotalScore), v))
	})
}

// TotalScoreHasPrefix applies the HasPrefix predicate on the "total_score" field.
func TotalScoreHasPrefix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTotalScore), v))
	})
}

// TotalScoreHasSuffix applies the HasSuffix predicate on the "total_score" field.
func TotalScoreHasSuffix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTotalScore), v))
	})
}

// TotalScoreEqualFold applies the EqualFold predicate on the "total_score" field.
func TotalScoreEqualFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTotalScore), v))
	})
}

// TotalScoreContainsFold applies the ContainsFold predicate on the "total_score" field.
func TotalScoreContainsFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTotalScore), v))
	})
}

// ClassRateEQ applies the EQ predicate on the "class_rate" field.
func ClassRateEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassRate), v))
	})
}

// ClassRateNEQ applies the NEQ predicate on the "class_rate" field.
func ClassRateNEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClassRate), v))
	})
}

// ClassRateIn applies the In predicate on the "class_rate" field.
func ClassRateIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClassRate), v...))
	})
}

// ClassRateNotIn applies the NotIn predicate on the "class_rate" field.
func ClassRateNotIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClassRate), v...))
	})
}

// ClassRateGT applies the GT predicate on the "class_rate" field.
func ClassRateGT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClassRate), v))
	})
}

// ClassRateGTE applies the GTE predicate on the "class_rate" field.
func ClassRateGTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClassRate), v))
	})
}

// ClassRateLT applies the LT predicate on the "class_rate" field.
func ClassRateLT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClassRate), v))
	})
}

// ClassRateLTE applies the LTE predicate on the "class_rate" field.
func ClassRateLTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClassRate), v))
	})
}

// ClassRateContains applies the Contains predicate on the "class_rate" field.
func ClassRateContains(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClassRate), v))
	})
}

// ClassRateHasPrefix applies the HasPrefix predicate on the "class_rate" field.
func ClassRateHasPrefix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClassRate), v))
	})
}

// ClassRateHasSuffix applies the HasSuffix predicate on the "class_rate" field.
func ClassRateHasSuffix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClassRate), v))
	})
}

// ClassRateEqualFold applies the EqualFold predicate on the "class_rate" field.
func ClassRateEqualFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClassRate), v))
	})
}

// ClassRateContainsFold applies the ContainsFold predicate on the "class_rate" field.
func ClassRateContainsFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClassRate), v))
	})
}

// SchoolRateEQ applies the EQ predicate on the "school_rate" field.
func SchoolRateEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSchoolRate), v))
	})
}

// SchoolRateNEQ applies the NEQ predicate on the "school_rate" field.
func SchoolRateNEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSchoolRate), v))
	})
}

// SchoolRateIn applies the In predicate on the "school_rate" field.
func SchoolRateIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSchoolRate), v...))
	})
}

// SchoolRateNotIn applies the NotIn predicate on the "school_rate" field.
func SchoolRateNotIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSchoolRate), v...))
	})
}

// SchoolRateGT applies the GT predicate on the "school_rate" field.
func SchoolRateGT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSchoolRate), v))
	})
}

// SchoolRateGTE applies the GTE predicate on the "school_rate" field.
func SchoolRateGTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSchoolRate), v))
	})
}

// SchoolRateLT applies the LT predicate on the "school_rate" field.
func SchoolRateLT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSchoolRate), v))
	})
}

// SchoolRateLTE applies the LTE predicate on the "school_rate" field.
func SchoolRateLTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSchoolRate), v))
	})
}

// SchoolRateContains applies the Contains predicate on the "school_rate" field.
func SchoolRateContains(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSchoolRate), v))
	})
}

// SchoolRateHasPrefix applies the HasPrefix predicate on the "school_rate" field.
func SchoolRateHasPrefix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSchoolRate), v))
	})
}

// SchoolRateHasSuffix applies the HasSuffix predicate on the "school_rate" field.
func SchoolRateHasSuffix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSchoolRate), v))
	})
}

// SchoolRateEqualFold applies the EqualFold predicate on the "school_rate" field.
func SchoolRateEqualFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSchoolRate), v))
	})
}

// SchoolRateContainsFold applies the ContainsFold predicate on the "school_rate" field.
func SchoolRateContainsFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSchoolRate), v))
	})
}

// StepRankEQ applies the EQ predicate on the "step_rank" field.
func StepRankEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStepRank), v))
	})
}

// StepRankNEQ applies the NEQ predicate on the "step_rank" field.
func StepRankNEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStepRank), v))
	})
}

// StepRankIn applies the In predicate on the "step_rank" field.
func StepRankIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStepRank), v...))
	})
}

// StepRankNotIn applies the NotIn predicate on the "step_rank" field.
func StepRankNotIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStepRank), v...))
	})
}

// StepRankGT applies the GT predicate on the "step_rank" field.
func StepRankGT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStepRank), v))
	})
}

// StepRankGTE applies the GTE predicate on the "step_rank" field.
func StepRankGTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStepRank), v))
	})
}

// StepRankLT applies the LT predicate on the "step_rank" field.
func StepRankLT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStepRank), v))
	})
}

// StepRankLTE applies the LTE predicate on the "step_rank" field.
func StepRankLTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStepRank), v))
	})
}

// StepRankContains applies the Contains predicate on the "step_rank" field.
func StepRankContains(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStepRank), v))
	})
}

// StepRankHasPrefix applies the HasPrefix predicate on the "step_rank" field.
func StepRankHasPrefix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStepRank), v))
	})
}

// StepRankHasSuffix applies the HasSuffix predicate on the "step_rank" field.
func StepRankHasSuffix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStepRank), v))
	})
}

// StepRankEqualFold applies the EqualFold predicate on the "step_rank" field.
func StepRankEqualFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStepRank), v))
	})
}

// StepRankContainsFold applies the ContainsFold predicate on the "step_rank" field.
func StepRankContainsFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStepRank), v))
	})
}

// UploadDateEQ applies the EQ predicate on the "upload_date" field.
func UploadDateEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUploadDate), v))
	})
}

// UploadDateNEQ applies the NEQ predicate on the "upload_date" field.
func UploadDateNEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUploadDate), v))
	})
}

// UploadDateIn applies the In predicate on the "upload_date" field.
func UploadDateIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUploadDate), v...))
	})
}

// UploadDateNotIn applies the NotIn predicate on the "upload_date" field.
func UploadDateNotIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUploadDate), v...))
	})
}

// UploadDateGT applies the GT predicate on the "upload_date" field.
func UploadDateGT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUploadDate), v))
	})
}

// UploadDateGTE applies the GTE predicate on the "upload_date" field.
func UploadDateGTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUploadDate), v))
	})
}

// UploadDateLT applies the LT predicate on the "upload_date" field.
func UploadDateLT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUploadDate), v))
	})
}

// UploadDateLTE applies the LTE predicate on the "upload_date" field.
func UploadDateLTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUploadDate), v))
	})
}

// UploadDateContains applies the Contains predicate on the "upload_date" field.
func UploadDateContains(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUploadDate), v))
	})
}

// UploadDateHasPrefix applies the HasPrefix predicate on the "upload_date" field.
func UploadDateHasPrefix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUploadDate), v))
	})
}

// UploadDateHasSuffix applies the HasSuffix predicate on the "upload_date" field.
func UploadDateHasSuffix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUploadDate), v))
	})
}

// UploadDateEqualFold applies the EqualFold predicate on the "upload_date" field.
func UploadDateEqualFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUploadDate), v))
	})
}

// UploadDateContainsFold applies the ContainsFold predicate on the "upload_date" field.
func UploadDateContainsFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUploadDate), v))
	})
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedIn applies the In predicate on the "is_deleted" field.
func IsDeletedIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedNotIn applies the NotIn predicate on the "is_deleted" field.
func IsDeletedNotIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedGT applies the GT predicate on the "is_deleted" field.
func IsDeletedGT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedGTE applies the GTE predicate on the "is_deleted" field.
func IsDeletedGTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLT applies the LT predicate on the "is_deleted" field.
func IsDeletedLT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLTE applies the LTE predicate on the "is_deleted" field.
func IsDeletedLTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedContains applies the Contains predicate on the "is_deleted" field.
func IsDeletedContains(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedHasPrefix applies the HasPrefix predicate on the "is_deleted" field.
func IsDeletedHasPrefix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedHasSuffix applies the HasSuffix predicate on the "is_deleted" field.
func IsDeletedHasSuffix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedEqualFold applies the EqualFold predicate on the "is_deleted" field.
func IsDeletedEqualFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedContainsFold applies the ContainsFold predicate on the "is_deleted" field.
func IsDeletedContainsFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIsDeleted), v))
	})
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteTime), v...))
	})
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...string) predicate.Student {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteTime), v...))
	})
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeContains applies the Contains predicate on the "delete_time" field.
func DeleteTimeContains(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeHasPrefix applies the HasPrefix predicate on the "delete_time" field.
func DeleteTimeHasPrefix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeHasSuffix applies the HasSuffix predicate on the "delete_time" field.
func DeleteTimeHasSuffix(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeEqualFold applies the EqualFold predicate on the "delete_time" field.
func DeleteTimeEqualFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeContainsFold applies the ContainsFold predicate on the "delete_time" field.
func DeleteTimeContainsFold(v string) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeleteTime), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Student) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Student) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Student) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		p(s.Not())
	})
}
