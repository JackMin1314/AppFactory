// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package dao

import (
	"AppFactory/internal/dao/internal"
	"AppFactory/internal/model"
	"time"

	"github.com/gogf/gf/frame/g"
	"go.uber.org/zap"
)

// queryExamAllDao is the manager for logic model data accessing
// and custom defined data operations functions management. You can define
// methods on it to extend its functionality as you wish.
type queryExamAllDao struct {
	*internal.QueryExamAllDao
}

var (
	// QueryExamAll is globally public accessible object for table query_exam_all operations.
	QueryExamAll = &queryExamAllDao{
		internal.QueryExamAll,
	}
)

// Fill with you ideas below.

// InsertTableAll 带事务写入query_exam_all数据库逻辑; datasAll需要去除表头字段
func (QEA *queryExamAllDao) InsertTableAll(logger *zap.SugaredLogger, datasAll [][]string) error {
	db := g.DB()
	tx, err := db.Begin()
	if err != nil {
		tx.Rollback()
		logger.Errorf("开启事务失败[%s]", err)
		return err
	}
	QueryEADaoTx := QueryExamAll.TX(tx)
	QEAList := make([]model.QueryExamAll, 0)
	var qea model.QueryExamAll
	for _, rowList := range datasAll {
		qea.ExamNum = rowList[0]
		qea.StudentName = rowList[1]
		qea.ClassName = rowList[2]
		qea.ChineseScore = rowList[3]
		qea.MathScore = rowList[4]
		qea.EnglishScore = rowList[5]
		qea.PoliticsScore = rowList[6]
		qea.HistoryScore = rowList[7]
		qea.TotalScore = rowList[8]
		qea.ClassRate = rowList[9]
		qea.SchoolRate = rowList[10]
		qea.StepRank = rowList[11]
		qea.UploadDate = time.Now().Format("20060102")
		qea.IsDeleted = "0"
		QEAList = append(QEAList, qea)
	}

	sqlResult, err := QueryEADaoTx.Insert(QEAList)
	if err != nil {
		logger.Errorf("插入数据库表[%s]数据失败[%s]", QEA.Table, err)
		tx.Rollback()
	}
	tx.Commit()
	if id, _ := sqlResult.RowsAffected(); id != 0 {
		logger.Infof("插入数据库表[%s]数据成功总数[%d]", QEA.Table, id)
	}
	return nil
}

// FindTableOne 根据条件查询数据库中的某条数据
func (QEA *queryExamAllDao) FindTableOne(logger *zap.SugaredLogger, where ...interface{}) (interface{}, error) {

	// db := g.DB()
	// qea := (*model.QueryExamAll)(nil)
	// err := db.Table(QEA.Table).Where(where).Struct(&qea)
	// if err != nil {
	// 	logger.Errorf("查询表[%s]语句%s，失败[%s]", QEA.Table, where, err)
	// }

	qea := (*model.QueryExamAll)(nil)
	err := QueryExamAll.Where(where).Struct(&qea)
	if err != nil {
		logger.Errorf("查询表[%s]语句%s，失败[%s]", QEA.Table, where, err)
	}
	return qea, nil
}

// FindTableAll 根据条件查询数据库中的某条数据
func (QEA *queryExamAllDao) FindTableAll(logger *zap.SugaredLogger, where ...interface{}) (interface{}, error) {

	qeas := ([]*model.QueryExamAll)(nil)
	err := QueryExamAll.Where(where).Structs(&qeas)
	if err != nil {
		logger.Errorf("查询表[%s]语句%s，失败[%s]", QEA.Table, where, err)
	}
	return qeas, nil
}

// SoftDeletRecord 根据条件软删除数据库中多条数据(is_deleted=1,插入delete_time)
func (QEA *queryExamAllDao) SoftDeletRecord(logger *zap.SugaredLogger, where ...interface{}) error {
	db := g.DB()
	sqlResult, err := db.Table(QEA.Table).Data(where[0]).Data("delete_time", time.Now().Format("20060102150405")).Where(where[1:]).Update()
	if err != nil {
		logger.Errorf("软删除数据库表[%s]语句%s,数据失败[%s]", QEA.Table, where, err)
	}
	if id, _ := sqlResult.RowsAffected(); id != 0 {
		logger.Infof("软删除数据库表[%s]数据成功总数[%d]", QEA.Table, id)
	}

	return nil
}
