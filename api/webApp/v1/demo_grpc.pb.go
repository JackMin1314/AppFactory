// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppExcelClient is the client API for AppExcel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppExcelClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	GetStudent(ctx context.Context, in *GetStudentRequest, opts ...grpc.CallOption) (*GetStudentReply, error)
}

type appExcelClient struct {
	cc grpc.ClientConnInterface
}

func NewAppExcelClient(cc grpc.ClientConnInterface) AppExcelClient {
	return &appExcelClient{cc}
}

func (c *appExcelClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/api.webApp.v1.AppExcel/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appExcelClient) GetStudent(ctx context.Context, in *GetStudentRequest, opts ...grpc.CallOption) (*GetStudentReply, error) {
	out := new(GetStudentReply)
	err := c.cc.Invoke(ctx, "/api.webApp.v1.AppExcel/GetStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppExcelServer is the server API for AppExcel service.
// All implementations must embed UnimplementedAppExcelServer
// for forward compatibility
type AppExcelServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	GetStudent(context.Context, *GetStudentRequest) (*GetStudentReply, error)
	mustEmbedUnimplementedAppExcelServer()
}

// UnimplementedAppExcelServer must be embedded to have forward compatible implementations.
type UnimplementedAppExcelServer struct {
}

func (UnimplementedAppExcelServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedAppExcelServer) GetStudent(context.Context, *GetStudentRequest) (*GetStudentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudent not implemented")
}
func (UnimplementedAppExcelServer) mustEmbedUnimplementedAppExcelServer() {}

// UnsafeAppExcelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppExcelServer will
// result in compilation errors.
type UnsafeAppExcelServer interface {
	mustEmbedUnimplementedAppExcelServer()
}

func RegisterAppExcelServer(s grpc.ServiceRegistrar, srv AppExcelServer) {
	s.RegisterService(&AppExcel_ServiceDesc, srv)
}

func _AppExcel_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppExcelServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.webApp.v1.AppExcel/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppExcelServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppExcel_GetStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppExcelServer).GetStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.webApp.v1.AppExcel/GetStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppExcelServer).GetStudent(ctx, req.(*GetStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppExcel_ServiceDesc is the grpc.ServiceDesc for AppExcel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppExcel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.webApp.v1.AppExcel",
	HandlerType: (*AppExcelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _AppExcel_SayHello_Handler,
		},
		{
			MethodName: "GetStudent",
			Handler:    _AppExcel_GetStudent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo.proto",
}
